Problem link: https://leetcode.com/problems/majority-element-ii/
Asked by: Amazon , gooogle, blooomberg and microsoft in past 3 monts.

Optimised Version:
Idea: Since at most 2 elements can appear > ⌊n/3⌋ times
Proof: Let prove by contadiction:
suppose 3 elements are a, ,b and c -> a/3 + b/3 + c/3 = n but since size is upto n so it is not possible.
we will use use a modified Boyer-Moore algorithm to find up to 2 candidates, then verify them.

Steps:
• Phase 1 - Find candidates: Maintain 2 potential candidates with counters

If current element matches candidate1/candidate2, increment respective counter
If counters are 0, assign current element as new candidate
Otherwise, decrement both counters (voting against both candidates)

• Phase 2 - Verify candidates: Count actual occurrences of both candidates

• Phase 3 - Filter results: Return only candidates with count > ⌊n/3⌋

Time complexity:
O(n) time, O(1) space


Implementation in java:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer>res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return res;
        }
        Integer candidate1 = null, candidate2 = null;
        int cnt1 = 0, cnt2 = 0;
        for(int num : nums){
            // phase 1 : finding two candidates
            if(candidate1 != null && candidate1 == num){
                cnt1++;
            }
            else if(candidate2 != null && candidate2 == num){
                cnt2++;
            }
            else if(cnt1 == 0){
                // replace the candidate1
                candidate1 = num;
                cnt1++;
            }
            else if(cnt2 == 0){
                // replace the candidate2
                candidate2 = num;
                cnt2++;
            }
            else {
                // vote against both candidates
                cnt1--;
                cnt2--;
            }
        }

            // phase 2: verify candidates by counting their actual occuranceces
            cnt1 = 0;
            cnt2 = 0;
            for(int num : nums){
                if(candidate1 != null && candidate1 == num){
                    cnt1++;
                }
                else if(candidate2 != null && candidate2 == num){
                    cnt2++;
                }
            }
            // phase 3: add valid candidates to res
            int threshhold = nums.length / 3;
            if(cnt1 > threshhold){
                res.add(candidate1);
            }
            if(cnt2 > threshhold){
                res.add(candidate2);
            }
        
        return res;
    }
}
