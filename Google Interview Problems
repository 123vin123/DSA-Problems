// Google Problem - > Android Unlock Patterns
Solution -> 
1 - First notice the constraint carefully.
2 - Two movements are possible - > 
   a - > single step movement.(Adjacent moves(left, right, up ,down), diagonal moves and extended moves(Knight moves)
   b - > SKIP_DOT_MOVES(Straight Skip Moves (Horizontal & Vertical)) and Diagonal Skip Moves
example ->
These moves are two steps in a straight line, skipping over a middle dot:
{0, 2} → Moves two steps right, skipping (0,1)
{0, -2} → Moves two steps left, skipping (0,1)
These moves are two steps diagonally, skipping over a middle dot:
{-2, -2} → Moves two steps diagonally up-left, skipping (-1, -1).
3- After this explore all possible paths and increment the ans.
4. When exploring the skip_dot_moves first find the middle cell and check it is already visited or not.

------------------------------------------------------------------------------------------------CODE --------------------------------------------------------------------------------------------------------------
class Solution {
    private static final int[][] SINGLE_STEP_MOVES = {
         { 0, 1 },
        { 0, -1 },
        { 1, 0 },
        { -1, 0 }, // Adjacent moves (right, left, down, up)
        { 1, 1 },
        { -1, 1 },
        { 1, -1 },
        { -1, -1 }, // Diagonal moves
        { -2, 1 },
        { -2, -1 },
        { 2, 1 },
        { 2, -1 }, // Extended moves (knight-like moves)
        { 1, -2 },
        { -1, -2 },
        { 1, 2 },
        { -1, 2 },
    };

    private static final int[][] SKIP_DOT_MOVES = {
            { 0, 2 },
        { 0, -2 },
        { 2, 0 },
        { -2, 0 }, // Straight skip moves (e.g., 1 to 3, 4 to 6)
        { -2, -2 },
        { 2, 2 },
        { 2, -2 },
        { -2, 2 },
    };
    public int numberOfPatterns(int m, int n) {
        int totalPatterns = 0;
        for(int row = 0; row < 3; row++){
            for(int col = 0; col < 3; col++){
                boolean[][] vis = new boolean[3][3];
                totalPatterns += countPatternsFromDot(m,n, 1, row, col,vis);
            }
        }
        return totalPatterns;
    }
    private int countPatternsFromDot(int m, int n, int currLen,int currRow, int currCol,boolean[][] vis){
        if(currLen > n){
            return 0;
        }
        int validPatterns = 0;
        if(currLen >= m){
            validPatterns++;
        }
        vis[currRow][currCol] = true;
        for(int[] move : SINGLE_STEP_MOVES){
            int newRow = currRow + move[0];
            int newCol = currCol + move[1];
            if(isValid(newRow, newCol,vis)){
                validPatterns += countPatternsFromDot(m, n, currLen+1, newRow, newCol, vis);
            }
        }
        for(int[] move : SKIP_DOT_MOVES){
            int newRow = currRow + move[0];
            int newCol = currCol + move[1];
            if(isValid(newRow, newCol,vis)){
                int midddleRow = currRow + move[0]/2;
                int midddleCol = currCol + move[1]/2;
                if(vis[midddleRow][midddleCol]){
                    validPatterns += countPatternsFromDot(m, n, currLen+1, newRow, newCol, vis);
                }
            }
        }
        // use backtraling
        vis[currRow][currCol] = false;
        return validPatterns;
    }

    private boolean isValid(int row, int col, boolean[][] vis){
        return (row >= 0 && col >= 0 && row < 3 && col < 3 && !vis[row][col]);
    }
}



--------------------------------------------------------------------------Time Cpmplexity---------------------------------------------------------------------
Here we are exploring all the possible paths using backtracking. We are traversing over whole grid
So Time complexity:O(9⋅8^n)
The methodnumberOfPatternsiterates through all9dots on the grid as a starting point.
In each call tocountPatternsFromDot, the function explores all possible moves from the current dot. Let8be the approximate number of choices at each dot. In the worst-case scenario, each recursive call leads to further recursive calls, up to a maximum depth ofn. Thus, the total number of patterns explored can be approximated by 9×8^n (each move branching out into multiple further moves).
Thus, the overall time complexity of the algorithm isO(9⋅8^n).
---------------------------------------------------------------------------Space Complexity=------------------------------------------------------
The maximum depth of the recursion stack is n.




-------------------------------------------------------------------------Optimised Approach-------------------------------------------------------------
A major inconvenience in the previous approach was hardcoding each possible move from a dot. Instead of physically creating a grid and traversing it, notice that we can reach
all other dots from each dot, albeit some of those moves are skip moves. So, let's eliminate the arrays of moves, and instead maintain a matrix calledjump. This matrix will
track which moves require a jump and over which dot. For instance, moving from dot2to dot8necessitates jumping over dot5, so we'll setjump[2][8]to5.
Another crucial observation is that when we iterate over all numbers innumberOfPatternsto find the total number of moves starting with each number, we're performing redundant
calculations.
Time -> Time complexity:O(3⋅8^n).


Code -> 
class Solution {
    public int numberOfPatterns(int m, int n) {
        int[][] jump = new int[10][10];
        jump[1][3] = jump[3][1] = 2;
        jump[4][6] = jump[6][4] = 5;
         jump[7][9] = jump[9][7] = 8;
          jump[1][7] = jump[7][1] = 4;
        jump[2][8] = jump[8][2] = 5;
        jump[3][9] = jump[9][3] = 6;
          jump[1][9] = jump[9][1] = jump[3][7] = jump[7][3] = 5;
            boolean[] vis = new boolean[10];
        int totalPatterns = 0;
        totalPatterns += countPatternsFromDot(1, 1, m, n, jump,vis)*4;
        totalPatterns += countPatternsFromDot(2, 1, m, n, jump, vis)*4;
        totalPatterns += countPatternsFromDot(5, 1, m, n,  jump, vis);
        return totalPatterns;
    }
  private int countPatternsFromDot(int currNum,int currLen , int minLen, int maxLen,int[][] jump, boolean[] vis){
       if(currLen > maxLen){
        return 0;
       }
       int validPattern = 0;
       if(currLen >= minLen){
        validPattern++;
       }
       vis[currNum] = true;
      for(int nextNum = 1; nextNum <= 9; nextNum++){
        int jumpOverNum = jump[currNum][nextNum];
        if(!vis[nextNum] && (jumpOverNum == 0 || vis[jumpOverNum])){
            validPattern += countPatternsFromDot(nextNum, currLen+1, minLen, maxLen, jump, vis);
        }
      }
      vis[currNum] = false;
      return validPattern;
  }
    private boolean isValid(int row, int col, boolean[][] vis){
        return (row >= 0 && col >= 0 && row < 3 && col < 3 && !vis[row][col]);
    }
}

